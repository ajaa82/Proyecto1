import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

def calcular_dosificacion(resistencia_objetivo, relacion_arena_cemento):
    # Parámetros iniciales (puedes ajustar según tus necesidades)
    resistencia_referencia = 20  # Resistencia de referencia para una relación arena/cemento de 3:1
    dosificacion_referencia = {'cemento': 1, 'arena': 3}  # Dosificación de referencia para resistencia_referencia

    # Calcular la dosificación ajustada para la resistencia objetivo
    factor_ajuste = resistencia_objetivo / resistencia_referencia
    dosificacion_ajustada = {material: factor_ajuste * dosificacion_referencia[material]
                             for material in dosificacion_referencia}

    # Ajustar la dosificación para cumplir con la relación arena/cemento deseada
    dosificacion_ajustada['arena'] *= relacion_arena_cemento
    dosificacion_ajustada['cemento'] /= relacion_arena_cemento

    return dosificacion_ajustada

def mostrar_resultados(resistencia_objetivo, relacion_arena_cemento):
    # Calcular la dosificación de los materiales
    dosificacion = calcular_dosificacion(resistencia_objetivo, relacion_arena_cemento)

    # Mostrar resultados
    resultados_text.config(state=tk.NORMAL)
    resultados_text.delete('1.0', tk.END)
    resultados_text.insert(tk.END, "Dosificación de materiales:\n")
    for material, cantidad in dosificacion.items():
        resultados_text.insert(tk.END, f"{material}: {cantidad:.2f} partes\n")
    resultados_text.config(state=tk.DISABLED)

# Función para manejar el botón "Calcular"
def calcular_dosificacion_y_grafico():
    # Obtener valores de las entradas
    resistencia_objetivo = float(resistencia_entry.get())
    relacion_arena_cemento = float(relacion_entry.get())

    # Calcular la dosificación y mostrar resultados
    mostrar_resultados(resistencia_objetivo, relacion_arena_cemento)

    # Crear y mostrar el gráfico (puedes personalizar según tus necesidades)
    dias = [3, 7, 14, 28]
    resistencias = [resistencia_objetivo * (1.1 ** dia) * 10.1972 for dia in dias]  # Convertir MPa a kg/cm²

    fig, ax = plt.subplots()
    ax.plot(dias, resistencias, marker='o', linestyle='-', color='b')
    ax.set_xlabel('Días')
    ax.set_ylabel('Resistencia (kg/cm²)')
    ax.set_title('Desarrollo de Resistencia con el Tiempo')

    canvas = FigureCanvasTkAgg(fig, master=window)
    canvas_widget = canvas.get_tk_widget()
    canvas_widget.grid(row=4, column=0, columnspan=2)

# Crear la interfaz gráfica
window = tk.Tk()
window.title("Diseño de Mezcla de Hormigón")

# Etiquetas y entradas
resistencia_label = tk.Label(window, text="Resistencia Objetivo (kg/cm²):")
resistencia_label.grid(row=0, column=0, padx=5, pady=5, sticky=tk.E)
resistencia_entry = ttk.Entry(window)
resistencia_entry.grid(row=0, column=1, padx=5, pady=5)

relacion_label = tk.Label(window, text="Relación Arena/Cemento:")
relacion_label.grid(row=1, column=0, padx=5, pady=5, sticky=tk.E)
relacion_entry = ttk.Entry(window)
relacion_entry.grid(row=1, column=1, padx=5, pady=5)

# Botón para calcular dosificación y mostrar gráfico
calcular_button = ttk.Button(window, text="Calcular y Mostrar Gráfico", command=calcular_dosificacion_y_grafico)
calcular_button.grid(row=2, column=0, columnspan=2, pady=10)

# Resultados
resultados_text = tk.Text(window, height=6, width=40, state=tk.DISABLED)
resultados_text.grid(row=3, column=0, columnspan=2, pady=10)

# Iniciar la interfaz gráfica
window.mainloop()